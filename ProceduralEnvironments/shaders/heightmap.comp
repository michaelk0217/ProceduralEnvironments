#version 450
#extension GL_EXT_samplerless_texture_functions : require
layout(row_major) uniform;
layout(row_major) buffer;

#line 13 0
layout(r32f)
layout(binding = 0)
uniform image2D outNoise_0;


#line 26
struct SLANG_ParameterGroup_HeightMapParams_std430_0
{
    int seed_0;
    vec2 offset_0;
    float frequency_0;
    int octaves_0;
    float lacunarity_0;
    float persistence_0;
    float noiseScale_0;
};


#line 18
layout(push_constant)
layout(std430) uniform block_SLANG_ParameterGroup_HeightMapParams_std430_0
{
    int seed_0;
    vec2 offset_0;
    float frequency_0;
    int octaves_0;
    float lacunarity_0;
    float persistence_0;
    float noiseScale_0;
}HeightMapParams_0;
uint hash_0(uvec2 p_0, int seed_1)
{

    uvec2 _S1 = (p_0 + uint(seed_1)) * uvec2(1664525U, 1013904223U);

#line 29
    uvec2 _S2 = _S1;



    _S2[0] = _S2[0] + _S1.y;
    _S2[1] = _S2[1] + _S2.x;
    uvec2 _S3 = _S2 ^ (_S2 >> 16);

#line 35
    _S2 = _S3;
    _S2[0] = _S2[0] + _S3.y;
    _S2[1] = _S2[1] + _S2.x;
    uvec2 _S4 = _S2 ^ (_S2 >> 16);

#line 38
    _S2 = _S4;
    return _S4.x;
}

vec2 getGradient_0(uint n_0)
{
    switch(n_0 & 3U)
    {
    case 0U:
        {

#line 46
            return vec2(1.0, 1.0);
        }
    case 1U:
        {

#line 47
            return vec2(-1.0, 1.0);
        }
    case 2U:
        {

#line 48
            return vec2(1.0, -1.0);
        }
    case 3U:
        {

#line 49
            return vec2(-1.0, -1.0);
        }
    default:
        {

#line 50
            return vec2(0.0, 0.0);
        }
    }

#line 50
}



float PerlinNoise_0(vec2 p_1)
{

    vec2 f_0 = fract(p_1);



    vec2 u_0 = f_0 * f_0 * f_0 * (f_0 * (f_0 * 6.0 - 15.0) + 10.0);

    uvec2 _S5 = uvec2(floor(p_1));

#line 79
    float _S6 = u_0.x;

#line 79
    return mix(mix(dot(getGradient_0(hash_0(_S5, HeightMapParams_0.seed_0)), f_0), dot(getGradient_0(hash_0(_S5 + uvec2(1U, 0U), HeightMapParams_0.seed_0)), f_0 - vec2(1.0, 0.0)), _S6), mix(dot(getGradient_0(hash_0(_S5 + uvec2(0U, 1U), HeightMapParams_0.seed_0)), f_0 - vec2(0.0, 1.0)), dot(getGradient_0(hash_0(_S5 + uvec2(1U, 1U), HeightMapParams_0.seed_0)), f_0 - vec2(1.0, 1.0)), _S6), u_0.y);
}


#line 87
float fractalNoise_0(float x_0, float y_0, float width_0, float height_0)
{



    float _S7 = HeightMapParams_0.frequency_0;



    float _S8 = width_0 / 2.0;
    float _S9 = height_0 / 2.0;

#line 97
    int i_0 = 0;

#line 97
    float freq_0 = _S7;

#line 97
    float amplitude_0 = 1.0;

#line 97
    float total_0 = 0.0;

#line 97
    float maxAmplitude_0 = 0.0;


    for(;;)
    {

#line 100
        if(i_0 < (HeightMapParams_0.octaves_0))
        {
        }
        else
        {

#line 100
            break;
        }

#line 109
        float total_1 = total_0 + PerlinNoise_0(vec2((x_0 - _S8) / HeightMapParams_0.noiseScale_0, (y_0 - _S9) / HeightMapParams_0.noiseScale_0) * freq_0) * amplitude_0;


        float maxAmplitude_1 = maxAmplitude_0 + amplitude_0;


        float freq_1 = freq_0 * HeightMapParams_0.lacunarity_0;
        float amplitude_1 = amplitude_0 * HeightMapParams_0.persistence_0;

#line 100
        i_0 = i_0 + 1;

#line 100
        freq_0 = freq_1;

#line 100
        amplitude_0 = amplitude_1;

#line 100
        total_0 = total_1;

#line 100
        maxAmplitude_0 = maxAmplitude_1;

#line 100
    }

#line 120
    if(maxAmplitude_0 == 0.0)
    {
        return 0.0;
    }
    return total_0 / maxAmplitude_0;
}


#line 131
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{

#line 133
    uint width_1;

#line 133
    uint height_1;
    ((width_1) = imageSize((outNoise_0)).x), ((height_1) = imageSize((outNoise_0)).y);

    uint _S10 = gl_GlobalInvocationID.x;

#line 136
    bool _S11;

#line 136
    if(_S10 >= width_1)
    {

#line 136
        _S11 = true;

#line 136
    }
    else
    {

#line 136
        _S11 = (gl_GlobalInvocationID.y) >= height_1;

#line 136
    }

#line 136
    if(_S11)
    {
        return;
    }

#line 148
    imageStore((outNoise_0), (ivec2(gl_GlobalInvocationID.xy)), vec4((fractalNoise_0(float(_S10) + HeightMapParams_0.offset_0.x, float(gl_GlobalInvocationID.y) + HeightMapParams_0.offset_0.y, float(width_1), float(height_1)) + 1.0) / 2.0, float(0), float(0), float(0)));
    return;
}

